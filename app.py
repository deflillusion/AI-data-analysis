import streamlit as st
import pandas as pd
from src.data_processing import load_data, classify_columns
from src.feature_engineering import create_features
from src.modeling import train_kmeans
from src.utils import export_to_csv, export_to_excel
from openai import OpenAI
import os
from dotenv import load_dotenv
import matplotlib.pyplot as plt
import seaborn as sns

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ì–∏–±–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", layout="wide")
st.title("üìä –ì–∏–±–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
if 'plot_data' not in st.session_state:
    st.session_state['plot_data'] = None
if 'cluster_summary' not in st.session_state:
    st.session_state['cluster_summary'] = None
if 'features_df' not in st.session_state:
    st.session_state['features_df'] = None

# –ó–∞–≥—Ä—É–∑–∫–∞ API-–∫–ª—é—á–∞
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    st.error("API-–∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª–µ .env.")
    st.stop()
client = OpenAI(api_key=api_key)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (.csv, .xlsx, .xml)", type=[
                                 "csv", "xlsx", "xls", "xml"])

if uploaded_file is not None:
    df = load_data(uploaded_file)
    if df is not None:
        st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        st.subheader("üìÑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df.head())

        # –í—ã–≤–æ–¥ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        st.subheader("üîé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")
        for col in df.columns:
            st.write(
                f"–ö–æ–ª–æ–Ω–∫–∞ '{col}': {df[col].nunique()} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")

        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫
        st.subheader("üîç –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫")
        if st.button("–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ —Å –ø–æ–º–æ—â—å—é GPT"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏..."):
                column_types = classify_columns(df, client)
                st.session_state['column_types'] = column_types
                st.write("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫:")
                st.json(column_types)

        # –†—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if 'column_types' in st.session_state:
            st.subheader("‚úèÔ∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            column_types = st.session_state['column_types']
            for col in df.columns:
                column_types[col] = st.selectbox(
                    f"–¢–∏–ø –∫–æ–ª–æ–Ω–∫–∏ '{col}'",
                    options=['–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä', '–¥–∞—Ç–∞', '—Å—É–º–º–∞',
                             '–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '—Ç–µ–∫—Å—Ç', '–¥—Ä—É–≥–æ–µ'],
                    index=['–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä', '–¥–∞—Ç–∞', '—Å—É–º–º–∞', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è',
                           '—Ç–µ–∫—Å—Ç', '–¥—Ä—É–≥–æ–µ'].index(column_types[col])
                )
            st.session_state['column_types'] = column_types

            # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
            st.subheader("ü§ñ –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è")
            features_df = create_features(df, column_types)
            if features_df is None or len(features_df) == 0:
                st.error(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ–ª–æ–Ω–æ–∫.")
            else:
                n_samples = len(features_df)
                max_clusters = min(n_samples, 10)
                if n_samples < 2:
                    st.error(
                        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏. –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞.")
                else:
                    n_clusters = st.slider(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤",
                        2,
                        max_clusters,
                        min(4, max_clusters)
                    )
                    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é"):
                        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è..."):
                            try:
                                kmeans, scaler, X_scaled = train_kmeans(
                                    features_df, n_clusters)
                                features_df['cluster'] = kmeans.predict(
                                    X_scaled)
                                st.session_state['features_df'] = features_df

                                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                                st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
                                fig, ax = plt.subplots()
                                sns.scatterplot(
                                    data=features_df, x='pca_1', y='pca_2', hue='cluster', palette='viridis', ax=ax)
                                ax.set_title("–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (PCA)")
                                st.pyplot(fig)
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
                                st.session_state['plot_data'] = fig

                                # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
                                st.subheader("üìà –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
                                cluster_summary = features_df.groupby(
                                    'cluster').mean()
                                st.dataframe(cluster_summary)
                                st.session_state['cluster_summary'] = cluster_summary

                            except ValueError as e:
                                st.error(
                                    f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ–ª–æ–Ω–æ–∫.")

                    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –æ—Ç GPT
                    if st.session_state['cluster_summary'] is not None:
                        st.subheader("ü§ñ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
                        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
                        if st.session_state['plot_data'] is not None:
                            st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (–ø–æ–≤—Ç–æ—Ä)")
                            st.pyplot(st.session_state['plot_data'])

                        if st.button("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –æ—Ç GPT"):
                            with st.spinner("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é..."):
                                try:
                                    st.write("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT...")
                                    prompt = f"""
                                    –¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö. –í–æ—Ç —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤:
                                    {st.session_state['cluster_summary'].to_csv()}
                                    –û–ø–∏—à–∏, –∫–∞–∫–∏–µ —Ç–∏–ø—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–∞–∂–¥–æ–º—É –∫–ª–∞—Å—Ç–µ—Ä—É. –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç—É.
                                    """
                                    response = client.chat.completions.create(
                                        model="gpt-3.5-turbo",  # –ó–∞–º–µ–Ω–∏–ª–∏ –Ω–∞ –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
                                        messages=[
                                            {"role": "user", "content": prompt}],
                                        temperature=0.7,
                                        max_tokens=500
                                    )
                                    st.write("–û—Ç–≤–µ—Ç –æ—Ç GPT –ø–æ–ª—É—á–µ–Ω.")
                                    st.markdown(
                                        "### ü§ñ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
                                    st.markdown(
                                        response.choices[0].message.content)
                                except Exception as e:
                                    st.error(
                                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")

                        # –≠–∫—Å–ø–æ—Ä—Ç
                        if st.session_state['features_df'] is not None:
                            st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                            csv_data = export_to_csv(
                                st.session_state['features_df'])
                            st.download_button("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (CSV)",
                                               csv_data,
                                               "segmentation_results.csv",
                                               "text/csv")

                            excel_data = export_to_excel(
                                st.session_state['features_df'])
                            st.download_button("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (Excel)",
                                               excel_data,
                                               "segmentation_results.xlsx",
                                               "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
