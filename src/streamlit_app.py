import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
from openai import OpenAI
import os
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", layout="wide")
st.title("üìä –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

# –ó–∞–≥—Ä—É–∑–∫–∞ API-–∫–ª—é—á–∞
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    st.error("API-–∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env.")
    st.stop()
client = OpenAI(api_key=api_key)

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö


@st.cache_data
def load_and_process_data(uploaded_file):
    try:
        if uploaded_file.name.endswith(".csv"):
            return pd.read_csv(uploaded_file, low_memory=False)
        elif uploaded_file.name.endswith((".xls", ".xlsx")):
            return pd.read_excel(uploaded_file)
        elif uploaded_file.name.endswith(".xml"):
            return pd.read_xml(uploaded_file)
        else:
            st.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ GPT


@st.cache_data
def generate_gpt_analysis(df, sample_size=100):
    sample_df = df.sample(n=min(sample_size, len(df)), random_state=42)
    sample_csv = sample_df.to_csv(index=False)
    prompt = f"""
    –¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö. –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Ç–∞–±–ª–∏—Ü–∞ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –∫–∞–∫–∏–µ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –∏–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∏–¥–Ω—ã.
    –ü—Ä–µ–¥–ª–æ–∂–∏ 3‚Äì5 –∏–¥–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å.
    –í–æ—Ç –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ CSV-—Ñ–æ—Ä–º–∞—Ç–µ:
    {sample_csv}
    """
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=800
        )
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT: {e}")
        return None


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (.csv, .xlsx, .xml)", type=[
                                 "csv", "xlsx", "xls", "xml"])
if uploaded_file is not None:
    df = load_and_process_data(uploaded_file)
    if df is not None:
        st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ—á–∏—Ç–∞–Ω.")
        st.subheader("üìÑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df.head())

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
        st.subheader("üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö")
        dtypes_df = pd.DataFrame({
            "column": df.columns,
            "dtype": [str(df[col].dtype) for col in df.columns],
            "num_unique": [df[col].nunique() for col in df.columns],
            "num_missing": [df[col].isna().sum() for col in df.columns],
        })
        st.dataframe(dtypes_df)

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫
        st.subheader("üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫")
        numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns
        cat_cols = df.select_dtypes(include=['object', 'category']).columns
        x_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è X", cat_cols)
        y_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è Y", numeric_cols)
        if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"):
            fig, ax = plt.subplots()
            df.groupby(x_col)[y_col].sum().plot(kind='bar', ax=ax)
            ax.set_title(f"–°—É–º–º–∞ {y_col} –ø–æ {x_col}")
            st.pyplot(fig)

        # GPT-–∞–Ω–∞–ª–∏–∑
        if st.button("üîç –ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏ –æ—Ç GPT"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é GPT..."):
                gpt_result = generate_gpt_analysis(df)
                if gpt_result:
                    st.subheader("üí° –ò–¥–µ–∏ –∏ –∞–Ω–∞–ª–∏–∑ –æ—Ç GPT:")
                    st.markdown(gpt_result)
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
